{
    "name": "base", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : 2021, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        // "resume_state": "experiments/debug_base_220226_214326/checkpoint/100" 
        "resume_state": null // ex: 10000, loading .state  and .pth from given iterations
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // use which dataset, indicates dataset's file name and class in [data] directory
                "name": ["image_dataset", "Dataset"], // import image_dataset.py and Dataset() class
                "validation_split": 0.1, // percent or number
                "args":{ // args to init dataset
                    "data_root": "/home/huangyecheng/dataset/cmfd/comofod" // /home/huangyecheng/dataset/cmfd/comofod
                } 
            },
            "dataloader":{
                "args":{ // args to init dataloader
                    "batch_size": 2, // batch size in every gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": ["image_dataset", "Dataset"], // import image_dataset.py and Dataset() class
                "args":{
                    "data_root": "/data/jlw/datasets/comofod",
                    "phase": "test"
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 1,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": {
        "which_model": { // use which model(trainer), indicates trainer's file and class in [models] directory
            "name": ["ae_model", "Model"], // import ae_model.py and Model() class
            "args": {} 
        }, 
        "which_networks": [ // list of network structure, indicates network's file name and class in [models/network] directory
            {
                "name": ["ae", "Network"], // ae_model.py and Network() class
                "args": {
                    "init_type": "kaiming" //network weights initialization method, can be [orthogonal|kaiming|normal], default is kaiming
                }
            }
        ],
        "which_metrics": ["mse"] // list of metrics, indicates metric's class in [models/metrics.py] file
    },

    "train": {
        "n_epoch": 1e5, // max epochs, not limited now
        "val_epoch": 5, // valdation every specified number of interations
        "save_checkpoint_epoch": 3,
        "log_iter": 1e3,
        "tensorboard" : true
    },
    
    "debug": { // args in debug mode, which will replace args in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 30,
        "data_len": 50 // dataset size
    }
}
